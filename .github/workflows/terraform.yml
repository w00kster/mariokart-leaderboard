name: Terraform
on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
    
permissions:
  contents: read
  pull-requests: write

env:
#  TF_VAR_component_version: "1.0.${{ github.run_number }}"
  TF_VAR_linode_token: ${{ secrets.LINODE_2023_05 }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: linode
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        working-directory: ./infrastructure/mysql

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./infrastructure/mysql
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ./infrastructure/mysql

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true
        working-directory: ./infrastructure/mysql

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          # github-token: ${{ secrets.GITHUB_TOKEN }} # may not be necessary
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
        working-directory: ./infrastructure/mysql
